Inheritance
In C#, inheritance allows a class to inherit properties, methods, and fields from another class,
facilitating code reuse and hierarchy management. Here are the different types of inheritance supported:

1. Single Inheritance
One class inherits from another class.
This is the most common form of inheritance.
Example:
class Animal  // Base class
{
    public void Eat() => Console.WriteLine("Eating...");
}

class Dog : Animal  // Derived class
{
    public void Bark() => Console.WriteLine("Barking...");
}

class Program
{
    static void Main()
    {
        Dog dog = new Dog();
        dog.Eat();  // Inherited from Animal
        dog.Bark();
    }
}


2. Multilevel Inheritance
A class inherits from another derived class, forming a chain of inheritance.
Example:
class Animal  // Base class
{
    public void Eat() => Console.WriteLine("Eating...");
}

class Mammal : Animal  // Derived from Animal
{
    public void Walk() => Console.WriteLine("Walking...");
}

class Dog : Mammal  // Derived from Mammal
{
    public void Bark() => Console.WriteLine("Barking...");
}

class Program
{
    static void Main()
    {
        Dog dog = new Dog();
        dog.Eat();  // Inherited from Animal
        dog.Walk(); // Inherited from Mammal
        dog.Bark();
    }
}



In C#, inheritance allows a class to inherit properties, methods, and fields from another class, facilitating code reuse and hierarchy management. Here are the different types of inheritance supported:

1. Single Inheritance
One class inherits from another class.
This is the most common form of inheritance.
Example:
csharp
Copy code
class Animal  // Base class
{
    public void Eat() => Console.WriteLine("Eating...");
}

class Dog : Animal  // Derived class
{
    public void Bark() => Console.WriteLine("Barking...");
}

class Program
{
    static void Main()
    {
        Dog dog = new Dog();
        dog.Eat();  // Inherited from Animal
        dog.Bark();
    }
}
Output:
Copy code
Eating...
Barking...
2. Multilevel Inheritance
A class inherits from another derived class, forming a chain of inheritance.
Example:
csharp
Copy code
class Animal  // Base class
{
    public void Eat() => Console.WriteLine("Eating...");
}

class Mammal : Animal  // Derived from Animal
{
    public void Walk() => Console.WriteLine("Walking...");
}

class Dog : Mammal  // Derived from Mammal
{
    public void Bark() => Console.WriteLine("Barking...");
}

class Program
{
    static void Main()
    {
        Dog dog = new Dog();
        dog.Eat();  // Inherited from Animal
        dog.Walk(); // Inherited from Mammal
        dog.Bark();
    }
}

3. Hierarchical Inheritance
Multiple classes inherit from a single base class.
Example:
class Animal  // Base class
{
    public void Eat() => Console.WriteLine("Eating...");
}

class Dog : Animal  // Derived class
{
    public void Bark() => Console.WriteLine("Barking...");
}

class Cat : Animal  // Another derived class
{
    public void Meow() => Console.WriteLine("Meowing...");
}

class Program
{
    static void Main()
    {
        Dog dog = new Dog();
        Cat cat = new Cat();
        dog.Eat();
        dog.Bark();
        cat.Eat();
        cat.Meow();
    }
}


4. Multiple Inheritance (Using Interfaces)
C# does not support multiple inheritance directly (one class cannot inherit from multiple classes).
However, multiple inheritance is achieved using interfaces.
Example:
interface IAnimal
{
    void Eat();
}

interface IWalker
{
    void Walk();
}

class Dog : IAnimal, IWalker  // Implements multiple interfaces
{
    public void Eat() => Console.WriteLine("Eating...");
    public void Walk() => Console.WriteLine("Walking...");
}

class Program
{
    static void Main()
    {
        Dog dog = new Dog();
        dog.Eat();
        dog.Walk();
    }
}

5. Hybrid Inheritance (Combination of Types)
Hybrid inheritance is a combination of more than one type of inheritance, often using interfaces along with class inheritance.
Example:
class Animal
{
    public void Eat() => Console.WriteLine("Eating...");
}

interface IWalker
{
    void Walk();
}

class Dog : Animal, IWalker  // Inherits from class and implements interface
{
    public void Walk() => Console.WriteLine("Walking...");
}

class Program
{
    static void Main()
    {
        Dog dog = new Dog();
        dog.Eat();
        dog.Walk();
    }
}

